name: CI Pipeline

on:
  pull_request:
    branches:
      - develop
      - main
  push:
    branches:
      - develop
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mm

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Build and test with Gradle
        run: ./gradlew build

      - name: Generate JaCoCo report
        run: ./gradlew jacocoTestReport

      - name: Validate test coverage using Python
        run: |
          python - <<EOF
          import xml.etree.ElementTree as ET

          report_path = "build/reports/jacoco/test/jacocoTestReport.xml"

          try:
              tree = ET.parse(report_path)
              root = tree.getroot()

              missed = sum(int(counter.get("missed", 0)) for counter in root.findall(".//counter[@type='LINE']"))
              covered = sum(int(counter.get("covered", 0)) for counter in root.findall(".//counter[@type='LINE']"))

              coverage_percent = (covered / (covered + missed)) * 100 if (covered + missed) > 0 else 0

              print(f"Cobertura de testes: {coverage_percent:.2f}%")

              MIN_COVERAGE = 80
              if coverage_percent < MIN_COVERAGE:
                  print(f"Erro: Cobertura de testes abaixo do mínimo exigido ({MIN_COVERAGE}%)")
                  exit(1)
              else:
                  print("Cobertura de testes dentro do mínimo exigido.")

          except Exception as e:
              print(f"Erro ao processar o relatório de cobertura: {e}")
              exit(1)
          EOF

      - name: Upload JaCoCo report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: build/reports/jacoco/test/html/index.html
